.in +4m

<a name="undeclared\-symbol">
.in -4m
\fBundeclared\-symbol\fP
.br
.in +4m
A symbol was used in an expression but never declared\.  This error only
appears in merge mode; in single mode it appears
as a warning and the symbol is given an empty default value\.  Undeclared
symbols result in dead branches which can never be activated\.  The usual
causes are typographical errors and relics left after code changes\.
For example,

<pre class="example">
if [ "\fB$CONFIG_405\fP" = "y" ]; then
   \.\.\.
fi
\fR
.in -4m

<a name="unbalanced\-endmenu">
.in -4m
\fBunbalanced\-endmenu\fP
.br
.in +4m
A rules file contains an extraneous <span class="keyword">endmenu\fP
which matches no open <span class="keyword">mainmenu_option\fP\.

<pre class="example">
# arch/mips64/config\.in
mainmenu_option next_comment
comment 'General setup'
\&\.\.\.
endmenu

source drivers/pci/Config\.in

\fBendmenu\fP
\fR
.in -4m


<a name="not\-a\-hex\-number">
.in -4m
\fBnot\-a\-hex\-number\fP
.br
.in +4m
The word provided as a default value for a <span class="keyword">hex\fP
statement could not be parsed as a hexadecimal number\.  This is not a real
example:

<pre class="example">
hex 'This has never happened' CONFIG_NONESUCH \fBfmeh\fP
\fR
.in -4m


<a name="parse\-error">
.in -4m
\fBparse\-error\fP
.br
.in +4m
This is a catch\-all error emitted by the bison parser when it encounters
unexpected tokens in the CML1 file\.  These are usually caused by people
thinking that the config language is the same as a shell script, and
writing rules containing shell metacharacters which aren't part of the
config language\.

<p class="emphasis">
The config language is not shell\.




Generally, these constructs will work in <span class="code">config\fP and
<span class="code">menuconfig\fP but fail in <span class="code">xconfig\fP
because <span class="code">xconfig\fP does not use the shell as a parser\.
Sometimes however, they will work in <span class="code">xconfig\fP too as
<span class="code">xconfig\fP sometimes ignores trailing tokens on a line\.
For example,


<pre class="example">
if [ "$CONFIG_IA64_SGI_SN1" = "y" \fB] || [\fP "$CONFIG_IA64_SGI_SN2" = "y" ]; then
	\.\.\.
fi
\fR
.in -4m

<a name="missing\-file">
.in -4m
\fBmissing\-file\fP
.br
.in +4m
A CML1 filename was included with the <span class="keyword">source\fP
statement but the file could not be opened\.  Usually this is the result
of an arch tree being only partly merged into the mainline kernel\.  For
example,

<pre class="example">
if [ "$CONFIG_SH_DREAMCAST" = "y" ]; then
   source \fBdrivers/maple/Config\.in\fP
fi
\fR
.in -4m


<a name="different\-compound\-type">
.in -4m
\fBdifferent\-compound\-type\fP
.br
.in +4m
A compound node (menu, <span class="keyword">choice\fP or
<span class="keyword">comment\fP statement) uses the same banner as
another compound node of a different type\.  This confuses the parser,
which tries to merge the two nodes\.  Note that
<span class="keyword">comment\fP statements are considered compound 
because of CML2, where comments were implemented as childless menus\.
Sometimes this error indicates a harmless duplication of comments\.
For example,

<pre class="example">
# net/ax25/Config\.in
\fBmainmenu_option\fP next_comment
comment \fB'AX\.25 network device drivers'\fP

source drivers/net/hamradio/Config\.in

endmenu

# drivers/net/hamradio/Config\.in
\fBcomment 'AX\.25 network device drivers'\fP

\fR
.in -4m


.in -4m
